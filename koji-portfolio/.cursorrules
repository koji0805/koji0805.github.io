# AI実装指示書

## プロジェクト概要
フリーランスエンジニアの案件獲得用ポートフォリオサイト

### 目的
- 技術力と実績を効果的にアピール
- 見込み顧客への迅速なポートフォリオ提示
- 継続的な案件獲得の実現

## 要件定義

### 必要機能
1. **ポートフォリオ一覧**
   - Python製アプリ（チャットツール、文字起こし、在庫管理）
   - FastAPI + React製ダッシュボード  
   - Ruby on Rails製ECサイト
   - カテゴリーフィルター機能

2. **ポートフォリオ詳細**
   - プロジェクト概要、担当範囲
   - 使用技術、スクリーンショット
   - GitHub/デモリンク

3. **プロフィール**
   - 自己紹介、スキルセット（Python, Ruby, JS, TS等）
   - 職務経歴、資格
   - SNSリンク（X、Qiita）

4. **問い合わせフォーム**
   - 名前、メール、内容
   - 送信確認画面

## 基本設計

### 技術スタック
- Next.js 14 + TypeScript（SSG対応）
- Tailwind CSS（スタイリング）
- React Hook Form（フォーム）
- Vercel（ホスティング）

### データモデル
```typescript
interface Portfolio {
  id: string
  title: string
  category: "python" | "web" | "rails"
  description: string
  role: string              // 担当範囲
  technologies: string[]
  thumbnail: string
  images: string[]
  github_url?: string
  demo_url?: string
  featured?: boolean        // 注目作品
}

interface Profile {
  bio: string
  skills: {
    category: string
    items: string[]
  }[]
  experience: string[]
  social: {
    x?: string
    qiita?: string
    github?: string
  }
}
```

### 画面構成
```
トップページ（1ページ完結）
├─ ヒーローセクション
│  ├─ キャッチコピー
│  └─ 簡潔な自己紹介
├─ ポートフォリオセクション
│  ├─ カテゴリータブ
│  └─ カードグリッド
├─ プロフィールセクション
│  ├─ 詳細な自己紹介
│  └─ スキル一覧
└─ 問い合わせセクション
```

### ディレクトリ構成
```
src/
├── app/
│   ├── page.tsx          // メインページ
│   ├── layout.tsx
│   └── globals.css
├── components/
│   ├── Hero.tsx          // ヒーローセクション
│   ├── PortfolioGrid.tsx // ポートフォリオ一覧
│   ├── PortfolioCard.tsx // 個別カード
│   ├── Profile.tsx       // プロフィール
│   └── ContactForm.tsx   // 問い合わせ
├── data/
│   ├── portfolios.ts     // 作品データ
│   └── profile.ts        // プロフィールデータ
└── types/
    └── index.ts          // 型定義
```

## コード生成ルール

### 基本原則
- **シンプル最優先** - 動くコードを最速で
- **コード量最小** - 1ファイル100行以内目標
- **型安全** - anyは使用禁止
- **早期リターン** - ネスト2段階まで

### 実装パターン
```tsx
// コンポーネント
export function ComponentName({ data }: { data: Portfolio }) {
  if (!data) return null
  
  return (
    <div className="rounded-lg bg-white p-6 shadow hover:shadow-lg transition-shadow">
      {/* シンプルな実装 */}
    </div>
  )
}

// データ取得（エラーは最小限）
const data = await fetch(url).catch(() => null)
```

### スタイリング指針
- 白背景ベース + アクセントカラー（青系）
- 十分な余白（p-6, gap-6 など）
- ホバーエフェクト必須
- レスポンシブ対応（grid-cols-1 md:grid-cols-2 lg:grid-cols-3）

### 実装順序
1. 型定義（types/index.ts）
2. サンプルデータ（data/）
3. 各セクションコンポーネント
4. メインページ統合（app/page.tsx）

### 品質基準
- TypeScriptエラー: 0
- Lighthouse Score: 90+
- 総行数: 1000行以内
- レスポンシブ対応: 必須

## AIへの指示対応例

「もっと機能を追加して」
→ 「基本機能を先に完成させ、動作確認後に追加しましょう」

「エラーハンドリングを詳しく」
→ 「必要最小限のcatchのみ実装します」

「アニメーションを派手に」
→ 「パフォーマンスを考慮し、CSS transitionのみ使用します」